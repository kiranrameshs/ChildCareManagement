package edu.neu.csye6200.daycare;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import java.util.Vector;

import org.omg.CORBA.DynAnyPackage.InvalidValue;

public class DayCareController {
	private static final String studentFileName = "student.csv";
	private static final String teacherFileName = "teacher.csv";
	private static List<Classroom> classroomList = null;
	private static List<EnrollmentRules> enrollmentruleList = null;
	
	public static String getDateformat() {
		DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM/dd/yyyy");
		LocalDate localDate = LocalDate.now();
		String date = DateTimeFormatter.ofPattern("yyy/MM/dd").format(localDate);
		return date;
	}
	
	public void addClassroom(Classroom classroom) {
		this.classroomList.add(classroom);
	}
	
	public void removeClassroom(Classroom classroom) {
		
	}
	
	public void addClassroomID(int classroomID) {
		
	}
	
	public void removeClassroomID(Classroom classroomID) {
		
	}
	
//	public Classroom getClassroomObj(int classroomID) {
//		
//	}
	
	public Classroom getClassDetails(Student student, EnrollmentRules rule) throws Exception {
		boolean classroomFound = false;
		if (classroomList.isEmpty()) {
			Classroom classObj = new Classroom(classroomList.size(), rule);
			classroomFound = true;
			return classObj;
		}
		else {
			for (Classroom classroom : classroomList) {
				if (classroom.getEnrollmentRule().equals(rule)) {
					if (classroom.getNumOfGroups()< rule.getGroupSize()) {
						classroomFound = true;
						return classroom;
					}
					else {
						System.out.println("Classroom matching age group found but room is full");
					}
				}
				else {
					System.out.println("Classroom not for this age group");
				}
			}
			if (classroomFound == false) {
				Classroom classObj = new Classroom(classroomList.size(), rule);
				classroomFound = true;
				return classObj;
			}	
		}
		throw new Exception("Invalid input while assigning Class ID");
		}

	public Group getGroupDetails(Classroom classroom) throws Exception {
		boolean groupFound = false;
		if ((classroom.getNumOfGroups())==0) {
			Group groupObj = new Group(classroom.getNumOfGroups(), classroom.getEnrollmentRule());
			groupFound = true;
			return groupObj;
		}
		else {
			for (Group group : classroom.getGroupList()) {
				if (group.getGroupSize() < group.getEnrollmentRule().getGroupSize()) {
					groupFound = true;
					return group;
				}
				else {
					System.out.println("Group found but currently full");
				}
			}
			if(groupFound == false) {
				Group groupObj = new Group(classroom.getNumOfGroups(), classroom.getEnrollmentRule());
				return groupObj;
			}
		}
		throw new Exception("Invalid input while assigning group ID");	
			
	}
	
	public EnrollmentRules getEnrollmentRulesObj(int age) throws InvalidValue {
		for (EnrollmentRules enrollmentRules : enrollmentruleList) {
			if((enrollmentRules.getMinAge()<= age && age <= enrollmentRules.getMaxAge())) {
				return enrollmentRules;
			}
			else {
				System.out.println("Invalid Age Input");
				
			}
		}
		throw new InvalidValue("Age not in range"); 
	}
	
	public static void demo() throws Exception {
		System.out.println("DayCare Demo ");
		//Creating Rules
		EnrollmentRulesFactory enrollFactoryObj = EnrollmentRulesFactory.getObj();
		System.out.println("Get Rules factory obj ");
		List<String> enrollmentRegulationList = new ArrayList<String>();
		//minAge, maxAge, num of Students, num of Teachers, groupSize 
		enrollmentRegulationList.add("6,12,4,1,3");
		enrollmentRegulationList.add("13,24,5,1,3");
		enrollmentRegulationList.add("25,35,6,1,3");
		enrollmentRegulationList.add("36,47,8,1,3");
		enrollmentRegulationList.add("48,59,12,1,2");
		enrollmentRegulationList.add("60,100,15,1,2");
		enrollmentruleList = enrollFactoryObj.getRuleObj(enrollmentRegulationList);
		for (EnrollmentRules EnrollmentRules : enrollmentruleList) {
			EnrollmentRules.showRuleDetails();
		}
		System.out.println("Rule objs created");
		FileUtil fileutil = new FileUtil();
		
		//Store data read from file in file_data, call readTextFile using FileUtil object passing filename
		List<String> student_data = fileutil.readTextFile(studentFileName);
		System.out.println("Student File read successfully");
		
		//Store data read from file in file_data, call readTextFile using FileUtil object passing filename
		List<String> teacher_data = fileutil.readTextFile(teacherFileName);
		System.out.println("Teacher File read successfully");

		//Get DayCare factory obj from DayCare factory
		DayCareFactory  factoryObj = DayCareFactory.getObj();
		
		DayCareController DayCare = factoryObj.getDayCareObj();
		
		//Get Student factory obj from Student factory
		StudentFactory  studentFactoryObj = StudentFactory.getObj();
		
		//enrollment begins here
		String sampleStudentData = "Bilz, Tompson, 20, #60 St Germain, Aron Tompson, Emma Tompson,"+new Date();
		Student student  = studentFactoryObj.getStudentObj(sampleStudentData);
		
		int studentAge = student.getAge();
		EnrollmentRules rule = DayCare.getEnrollmentRulesObj(studentAge);
		Classroom classroomObj = DayCare.getClassDetails(student, rule);
		DayCare.addClassroom(classroomObj);
		Group groupObj = DayCare.getGroupDetails(classroomObj);
		student.setGroupID(groupObj.getGroupID());
		student.setClassID(classroomObj.getClassroomID());
		groupObj.addStudent(student);
		classroomObj.addGroupObj(groupObj);
		student.showStudentDetails();
		
		
		
		//student.setClassID(DayCare.getClassDetails(student, rule).getClassroomID());
		//student.setGroupID(DayCare.getClassDetails(student.);
		
		
		
		
		
		
		
		

		
		System.out.println("DayCare Demo Done");
	}
	
	

}
